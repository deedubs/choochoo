// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: webhook_events.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countWebhookEventsByType = `-- name: CountWebhookEventsByType :one
SELECT COUNT(*) FROM webhook_events 
WHERE event_type = $1
`

func (q *Queries) CountWebhookEventsByType(ctx context.Context, eventType string) (int64, error) {
	row := q.db.QueryRow(ctx, countWebhookEventsByType, eventType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWebhookEvent = `-- name: CreateWebhookEvent :one
INSERT INTO webhook_events (
    delivery_id,
    event_type,
    repository_name,
    sender_login,
    action,
    payload
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, delivery_id, event_type, repository_name, sender_login, action, payload, created_at
`

type CreateWebhookEventParams struct {
	DeliveryID     string      `json:"delivery_id"`
	EventType      string      `json:"event_type"`
	RepositoryName pgtype.Text `json:"repository_name"`
	SenderLogin    pgtype.Text `json:"sender_login"`
	Action         pgtype.Text `json:"action"`
	Payload        []byte      `json:"payload"`
}

func (q *Queries) CreateWebhookEvent(ctx context.Context, arg CreateWebhookEventParams) (WebhookEvent, error) {
	row := q.db.QueryRow(ctx, createWebhookEvent,
		arg.DeliveryID,
		arg.EventType,
		arg.RepositoryName,
		arg.SenderLogin,
		arg.Action,
		arg.Payload,
	)
	var i WebhookEvent
	err := row.Scan(
		&i.ID,
		&i.DeliveryID,
		&i.EventType,
		&i.RepositoryName,
		&i.SenderLogin,
		&i.Action,
		&i.Payload,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOldWebhookEvents = `-- name: DeleteOldWebhookEvents :exec
DELETE FROM webhook_events 
WHERE created_at < $1
`

func (q *Queries) DeleteOldWebhookEvents(ctx context.Context, createdAt pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, deleteOldWebhookEvents, createdAt)
	return err
}

const getWebhookEventByDeliveryID = `-- name: GetWebhookEventByDeliveryID :one
SELECT id, delivery_id, event_type, repository_name, sender_login, action, payload, created_at FROM webhook_events 
WHERE delivery_id = $1
`

func (q *Queries) GetWebhookEventByDeliveryID(ctx context.Context, deliveryID string) (WebhookEvent, error) {
	row := q.db.QueryRow(ctx, getWebhookEventByDeliveryID, deliveryID)
	var i WebhookEvent
	err := row.Scan(
		&i.ID,
		&i.DeliveryID,
		&i.EventType,
		&i.RepositoryName,
		&i.SenderLogin,
		&i.Action,
		&i.Payload,
		&i.CreatedAt,
	)
	return i, err
}

const listWebhookEventsByRepository = `-- name: ListWebhookEventsByRepository :many
SELECT id, delivery_id, event_type, repository_name, sender_login, action, payload, created_at FROM webhook_events 
WHERE repository_name = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListWebhookEventsByRepositoryParams struct {
	RepositoryName pgtype.Text `json:"repository_name"`
	Limit          int32       `json:"limit"`
	Offset         int32       `json:"offset"`
}

func (q *Queries) ListWebhookEventsByRepository(ctx context.Context, arg ListWebhookEventsByRepositoryParams) ([]WebhookEvent, error) {
	rows, err := q.db.Query(ctx, listWebhookEventsByRepository, arg.RepositoryName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebhookEvent
	for rows.Next() {
		var i WebhookEvent
		if err := rows.Scan(
			&i.ID,
			&i.DeliveryID,
			&i.EventType,
			&i.RepositoryName,
			&i.SenderLogin,
			&i.Action,
			&i.Payload,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWebhookEventsByType = `-- name: ListWebhookEventsByType :many
SELECT id, delivery_id, event_type, repository_name, sender_login, action, payload, created_at FROM webhook_events 
WHERE event_type = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListWebhookEventsByTypeParams struct {
	EventType string `json:"event_type"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) ListWebhookEventsByType(ctx context.Context, arg ListWebhookEventsByTypeParams) ([]WebhookEvent, error) {
	rows, err := q.db.Query(ctx, listWebhookEventsByType, arg.EventType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebhookEvent
	for rows.Next() {
		var i WebhookEvent
		if err := rows.Scan(
			&i.ID,
			&i.DeliveryID,
			&i.EventType,
			&i.RepositoryName,
			&i.SenderLogin,
			&i.Action,
			&i.Payload,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
